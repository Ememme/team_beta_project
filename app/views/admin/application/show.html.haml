-# <%#
-# # Show
-#
-# This view is the template for the show page.
-# It renders the attributes of a resource,
-# as well as a link to its edit page.
-#
-# ## Local variables:
-#
-# - `page`:
-#   An instance of [Administrate::Page::Show][1].
-#   Contains methods for accessing the resource to be displayed on the page,
-#   as well as helpers for describing how each attribute of the resource
-#   should be displayed.
-#
-# [1]: http://www.rubydoc.info/gems/administrate/Administrate/Page/Show
-# %>

%body
  - content_for(:title) { "#{t("administrate.actions.show")} #{page.page_title}" }
  %header.main-content__header{:role => "banner"}
    %h1.main-content__page-title
      = content_for(:title)
    %div
      = link_to("#{t("administrate.actions.edit")} #{page.page_title}", [:edit, namespace, page.resource], class: "button") if valid_action? :edit
  %section.main-content__body
    #tabs-container
      %ul.tabs-menu
        %li.current
          =link_to(page.resource.class.to_s, "##{page.resource.class.to_s.downcase}")
        - page.attributes.each do |attribute|
          - if attribute.class == Administrate::Field::HasOne
            %li
              =link_to(I18n.t("activerecord.models.#{attribute.name}", count: 1), "##{attribute.name}")

      .tab
        %div.tab-content{id: page.resource.class.to_s.downcase, style: "display: block" }
          - page.attributes.each do |attribute|
            - if attribute.class != Administrate::Field::HasOne
              %dt.attribute-label{:id => "#{attribute.name}"}
                = t("activerecord.attributes.#{resource_name}.#{attribute.name}", default: attribute.name.titleize)
              %dd{:class => "attribute-data attribute-data--#{attribute.html_class}"}
                = render_field attribute

        - page.attributes.each do |attribute|
          - if attribute.class == Administrate::Field::HasOne
            %div.tab-content{id: attribute.name}
              = render_field attribute
